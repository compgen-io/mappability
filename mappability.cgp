#!/usr/bin/env cgpipe
#
# Builds a mappability bedgraph file for a genome and base-size
#
# Required:
#   --fasta genome.fa      Genome FASTA file
#   --size N               Size of the reads to use (ex: 100, 150)
#   --name val             Name of the genome (hg38, mm10, etc)
#
# Options:
#   --outdir val           Output directory (default to --name)
#                          Output will be written to ${outdir}/${size}bp/${name}_${size}.map.bg.gz
#
#   --index genome.fa      BWA indexed FASTA file (default to --fasta)
#   --chrom chr1,chr2...   Comma separated list of chromosomes to include (by default uses all)
#   --maxmem 24G            Default maxiumum memory to use (depends on genome and size, default 24G)
#
#
# BWA options:
#   --threads N            Threads to use (if set, will use threads+2 for BWA alignment)
#
# Note: this requires being able to submit jobs with a high memory limit (--maxmem)
#

bad = false

if "$(which bwa)" == ""
    print "Missing bwa from $PATH"
    bad = true
endif
if "$(which tabix)" == ""
    print "Missing tabix from $PATH"
    bad = true
endif
if "$(which bgzip)" == ""
    print "Missing bgzip from $PATH"
    bad = true
endif
if "$(which ngsutilsj)" == ""
    print "Missing ngsutilsj from $PATH"
    bad = true
endif

if !fasta
    print "Missing --fasta!"
    bad = true
endif
if !size
    print "Missing --size!"
    bad = true
endif
if !name
    print "Missing --name!"
    bad = true
endif

if bad
    showhelp
    exit 1
endif

index ?= fasta
threads ?= 0
outdir ?= "${name}"
maxmem ?= "24G"

runid ?= "run.$(date +%Y%m%d-%H%M)"
cgpipe.log = "${outdir}/logs/mappability-${runid}.log"
cgpipe.joblog = "${outdir}/logs/outfile.txt"
cgpipe.loglevel = 1
job.stdout = "${outdir}/logs/"
job.stderr = "${outdir}/logs/"
job.env = true
job.stack="10M"


if !chrom
    print "Determining chromosomes to use..."

    if ("${fasta}.fai".exists() 
        print "  Found FASTA index, using those values"
        chrom = "$(cat ${fasta}.fai | awk '{print $1}')".split("\n")
    else
        print "  No FASTA index found, finding chomosomes with grep"

        # check to see if FASTA is gzipped first
        $(gzip -t ${fasta})

        if $? == 0
            #print "gzipped"
            chrom = "$(gunzip -c ${fasta} | grep '^>' | awk '{print $1}' | sed -e 's/>//')".split("\n")
        else
            #print "plaintext"
            chrom = "$(grep '^>' ${fasta} | awk '{print $1}' | sed -e 's/>//')".split("\n")
        endif
    endif
    print "  ${chrom}"
else
    chrom = chrom.split(",")
endif
default_files = []
default_files += "${outdir}/${size}bp/${name}_${size}.map.bg.gz.tbi"


all: ${default_files}


__setup__:
    <% job.shexec = true %>
    mkdir -p ${outdir}/logs/ ${outdir}/fasta/ ${outdir}/${size}bp/{fasta,map}


${outdir}/${size}bp/${name}_${size}.map.bg.gz.tbi: ${outdir}/${size}bp/${name}_${size}.map.bg.gz
    <%  
        job.name = "${name}.${size}.tbi"
        job.walltime = "12:00:00"
    %>
    tabix -p bed $<


${outdir}/${size}bp/${name}_${size}.map.bg.gz: ${outdir}/${size}bp/map/${name}_@{chrom}_${size}.map.bg.gz
    <%  
        job.name = "${name}.${size}.merge"
        job.walltime = "12:00:00"
    %>
    gunzip -c $< | bgzip > $>.tmp && mv $>.tmp $>


${outdir}/${size}bp/map/%.map.bg.gz: ${outdir}/${size}bp/map/%.map.gz
    <%  chrom="$>".basename()
        job.name = "${name}.${size}.bg.${chrom}"
        job.walltime = "24:00:00"
        job.mem = "4G"
    %>
    bin/calc_mappability.py -bg $< | bgzip > $>.tmp && mv $>.tmp $>


for chr in chrom
    ${outdir}/${size}bp/map/${name}_${chr}_${size}.map.gz: ${outdir}/${size}bp/fasta/${chr}_${size}.1.fa.gz ${index} ${index}.bwt
        <%
            job.name = "${name}.${size}.map.${chr}"
            job.walltime = "48:00:00"
            job.mem = maxmem

            threadstr=""
            if threads > 0
                job.procs = threads+2
                threadstr = "-t ${threads}"
            endif
        %>
        I=1
        echo -n "" > $>.tmp
        while [ -e ${outdir}/${size}bp/fasta/${chr}_${size}.$I.fa.gz ]; do
            OK=0
            echo "Processing: ${outdir}/${size}bp/fasta/${chr}_${size}.$I.fa.gz"
            bwa mem -a ${threadstr} ${index} <(gunzip -c ${outdir}/${size}bp/fasta/${chr}_${size}.$I.fa.gz) | bin/sam_filter_map.py | gzip >> $>.tmp && OK=1
            if [ $OK -eq 0 ]; then
                echo "Failed"
                exit
            fi
            let "I=$I+1"
        done
        mv $>.tmp $>


    ${outdir}/${size}bp/fasta/${chr}_${size}.1.fa.gz: ${outdir}/fasta/${chr}.fa.gz
        <%
            job.name = "${size}-fasta.${chr}"
            job.walltime = "24:00:00"
            job.mem = "5G"
        %>
        JAVA_OPTS="-Xmx2G" ngsutilsj fasta-genreads --fasta -l ${size} $< | JAVA_OPTS="-Xmx2G" ngsutilsj fasta-split --gz --split-count 500000 --template ${outdir}/${size}bp/fasta/${chr}_${size}.tmp. - && rename .tmp. . ${outdir}/${size}bp/fasta/${chr}_${size}.tmp.*


    ${outdir}/fasta/${chr}.fa.gz: ${fasta}
        <%
            job.name = "fasta.${chr}"
            job.walltime = "24:00:00"
            job.mem = "4G"
        %>
        JAVA_OPTS="-Xmx3G" ngsutilsj fasta-split --template - $< ${chr} | gzip > $>.tmp && mv $>.tmp $>
done
